#!/usr/bin/env bash
# shellcheck disable=SC2124,SC2199

# Some people insist on scanned wet signature pdf's...
function bureaucracy() {
magick \
  -density 150 \
  "$1" \
  -colorspace gray \
  -linear-stretch 3.5%x10% \
  -blur 0x0.5 \
  -attenuate 0.25 \
  +noise Gaussian \
  -rotate 0.5 \
  -depth 2 \
  "$1"-SCANNED.pdf
}

# Create a data URI from a file
function datauri() {
  local mimetype
  local content
  mimetype=$(file --brief --no-pad --mime-type "$1")
  content=$(base64 < "$1")
  echo "data:$mimetype;base64,$content"
}

# Determine size of a file or total size of a directory
function fs() {
  if /usr/bin/du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    /usr/bin/du $arg -- "$@";
  else
    /usr/bin/du $arg .[^.]* ./*;
  fi;
}

function svg2png() {
  qlmanage -t -s 1000 -o . "$1"
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified.";
    return 1;
  fi;

  local domain="${1}";
  echo "Testing ${domain}…";
  echo ""; # newline

  local tmp
  tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText
    certText=$(echo "${tmp}" \
    | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
    no_serial, no_sigdump, no_signame, no_validity, no_version");
    echo "Common Name:";
    echo ""; # newline
    echo "${certText}" | grep "Subject:" | gsed --expression="s/^.*CN=//" \
      | gsed --expression="s/\/emailAddress=.*//";
    echo ""; # newline
    echo "Subject Alternative Name(s):";
    echo ""; # newline
    echo "${certText}" | grep --after-context=1 "Subject Alternative Name:" \
      | gsed --expression="2s/DNS://g" -e "s/ //g" | tr "," "\n" \
      | tail --lines=+2;
    return 0;
  else
    echo "ERROR: Certificate not found.";
    return 1;
  fi;
}

# Compare original and gzipped file size
function gz() {
  local origsize
  local gzipsize
  local ratio
  origsize=$(wc -c < "$1");
  gzipsize=$(gzip --to-stdout "$1" | wc -c);
  ratio=$(echo "$gzipsize * 100 / $origsize" | bc --mathlib);
  printf "orig: %d bytes\n" "$origsize";
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_" || exit;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
  if grep -q Microsoft /proc/version; then
    # Ubuntu on Windows using the Linux subsystem
    alias open='explorer.exe';
  else
    alias open='xdg-open';
  fi
fi

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar";
  tar --create --verbose --file "${tmpFile}" --exclude=".DS_Store" "${@}" \
    || return 1;

  size=$(
    stat -f"%z" "${tmpFile}" 2>/dev/null; # macOS `stat`
    stat -c"%s" "${tmpFile}" 2>/dev/null; # GNU `stat`
  );

  local cmd="";
  if (( size < 52428800 )) && hash zopfli 2>/dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli";
  else
    if hash pigz 2>/dev/null; then
      cmd="pigz";
    else
      cmd="gzip";
    fi;
  fi;

  echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
  "${cmd}" -v "${tmpFile}" || return 1;
  [ -f "${tmpFile}" ] && rm -f "${tmpFile}";

  zippedSize=$(
    stat -f"%z" "${tmpFile}.gz" 2>/dev/null; # macOS `stat`
    stat -c"%s" "${tmpFile}.gz" 2>/dev/null; # GNU `stat`
  );

  echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Convert DER certificates to PEM
function der2pem() {
  openssl x509 -inform der -in "$1" -out "$1.pem"
}

# Convert PFX certificates to PEM
function pfx2pem() {
  openssl pkcs12 -in "$1" -nocerts -out "$1.encrypted.key.pem"
  openssl pkcs12 -in "$1" -nokeys -out "$1.cert.pem"
  openssl rsa -in "$1.encrypted.key.pem" -out "$1.decrypted.key.pem"
}
