#!/usr/bin/env zsh

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v]

Uses llm <https://llm.datasette.io> to generate a CLI command.

Available options:

-e, --explain   Explain what the output does
-h, --help      Print this help and exit
-v, --verbose   Print script debug info
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
}

setup_colors() {
  # shellcheck disable=SC2034
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  while :; do
    case "${1-}" in
    -e | --explain) EXPLAIN=1 ;;
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  return 0
}

parse_params "$@"
setup_colors

# shellcheck disable=SC2068
if command -v llm &>/dev/null; then
  if [[ -n "${EXPLAIN-}" ]]; then
    EXPLAIN_TEXT="Also, provide a detailed description of how the command works."
    FORMAT_TEXT="Description: <insert_description_here>\nThe description should be in English."
  else
    EXPLAIN_TEXT=""
    FORMAT_TEXT="Don't enclose the command with extra quotes or backticks."
  fi

  # shellcheck disable=SC2116
  OUTPUT=$(llm --system "You're a command line tool that generates CLI commands for the user." \
    "Instructions: Write a CLI command that does the following: $(echo ${args[@]}). Make sure the command is correct and works on ${DISTRO} using ${SHELL}. ${EXPLAIN_TEXT}\n\Format: ${FORMAT_TEXT}\n\Make sure you use the format exactly as it is shown above. Never output any markdown, code blocks or code fences. Do output line breaks.")

  if [[ -n "${EXPLAIN-}" ]]; then
    msg $OUTPUT
  else
    if [[ -n "${ZLE_VERSION-}" ]]; then
      LBUFFER="$OUTPUT"
      zle redisplay
    else
      echo -n "$OUTPUT"
    fi
  fi
else
  die "llm is required but not installed. Aborting."
fi
